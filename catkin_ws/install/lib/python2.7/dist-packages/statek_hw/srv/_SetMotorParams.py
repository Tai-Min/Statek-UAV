# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from statek_hw/SetMotorParamsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetMotorParamsRequest(genpy.Message):
  _md5sum = "b8b46f7af46e051c167d322324998b79"
  _type = "statek_hw/SetMotorParamsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 loop_update_rate_ms # In ms. Set to 0 to ignore.
float64 wheel_max_angular_velocity # In rad/s. Set to negative to ignore.
float64 smoothing_factor # Between 0 and 1. Set to negative to ignore.
float64 kp # Set to negative to ignore.
float64 ki # Set to negative to ignore.
float64 kd # Set to negative to ignore.
"""
  __slots__ = ['loop_update_rate_ms','wheel_max_angular_velocity','smoothing_factor','kp','ki','kd']
  _slot_types = ['uint32','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       loop_update_rate_ms,wheel_max_angular_velocity,smoothing_factor,kp,ki,kd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetMotorParamsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.loop_update_rate_ms is None:
        self.loop_update_rate_ms = 0
      if self.wheel_max_angular_velocity is None:
        self.wheel_max_angular_velocity = 0.
      if self.smoothing_factor is None:
        self.smoothing_factor = 0.
      if self.kp is None:
        self.kp = 0.
      if self.ki is None:
        self.ki = 0.
      if self.kd is None:
        self.kd = 0.
    else:
      self.loop_update_rate_ms = 0
      self.wheel_max_angular_velocity = 0.
      self.smoothing_factor = 0.
      self.kp = 0.
      self.ki = 0.
      self.kd = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I5d().pack(_x.loop_update_rate_ms, _x.wheel_max_angular_velocity, _x.smoothing_factor, _x.kp, _x.ki, _x.kd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.loop_update_rate_ms, _x.wheel_max_angular_velocity, _x.smoothing_factor, _x.kp, _x.ki, _x.kd,) = _get_struct_I5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I5d().pack(_x.loop_update_rate_ms, _x.wheel_max_angular_velocity, _x.smoothing_factor, _x.kp, _x.ki, _x.kd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.loop_update_rate_ms, _x.wheel_max_angular_velocity, _x.smoothing_factor, _x.kp, _x.ki, _x.kd,) = _get_struct_I5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I5d = None
def _get_struct_I5d():
    global _struct_I5d
    if _struct_I5d is None:
        _struct_I5d = struct.Struct("<I5d")
    return _struct_I5d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from statek_hw/SetMotorParamsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetMotorParamsResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "statek_hw/SetMotorParamsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success # Set to true on success.
"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetMotorParamsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class SetMotorParams(object):
  _type          = 'statek_hw/SetMotorParams'
  _md5sum = 'f3ac856c8e72619c8db00906cbcd4cd3'
  _request_class  = SetMotorParamsRequest
  _response_class = SetMotorParamsResponse
