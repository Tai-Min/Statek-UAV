// Generated by gencpp from file statek_hw/RunImuCalibrationResponse.msg
// DO NOT EDIT!


#ifndef STATEK_HW_MESSAGE_RUNIMUCALIBRATIONRESPONSE_H
#define STATEK_HW_MESSAGE_RUNIMUCALIBRATIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace statek_hw
{
template <class ContainerAllocator>
struct RunImuCalibrationResponse_
{
  typedef RunImuCalibrationResponse_<ContainerAllocator> Type;

  RunImuCalibrationResponse_()
    : success(false)
    , acc_bias()
    , gyro_bias()
    , mag_bias()
    , mag_scale()  {
      acc_bias.assign(0.0);

      gyro_bias.assign(0.0);

      mag_bias.assign(0.0);

      mag_scale.assign(0.0);
  }
  RunImuCalibrationResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , acc_bias()
    , gyro_bias()
    , mag_bias()
    , mag_scale()  {
  (void)_alloc;
      acc_bias.assign(0.0);

      gyro_bias.assign(0.0);

      mag_bias.assign(0.0);

      mag_scale.assign(0.0);
  }



   typedef uint8_t _success_type;
  _success_type success;

   typedef boost::array<double, 3>  _acc_bias_type;
  _acc_bias_type acc_bias;

   typedef boost::array<double, 3>  _gyro_bias_type;
  _gyro_bias_type gyro_bias;

   typedef boost::array<double, 3>  _mag_bias_type;
  _mag_bias_type mag_bias;

   typedef boost::array<double, 3>  _mag_scale_type;
  _mag_scale_type mag_scale;





  typedef boost::shared_ptr< ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RunImuCalibrationResponse_

typedef ::statek_hw::RunImuCalibrationResponse_<std::allocator<void> > RunImuCalibrationResponse;

typedef boost::shared_ptr< ::statek_hw::RunImuCalibrationResponse > RunImuCalibrationResponsePtr;
typedef boost::shared_ptr< ::statek_hw::RunImuCalibrationResponse const> RunImuCalibrationResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator1> & lhs, const ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.acc_bias == rhs.acc_bias &&
    lhs.gyro_bias == rhs.gyro_bias &&
    lhs.mag_bias == rhs.mag_bias &&
    lhs.mag_scale == rhs.mag_scale;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator1> & lhs, const ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace statek_hw

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6cd60c1db4de1bdcd039c0b56b7d1d09";
  }

  static const char* value(const ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6cd60c1db4de1bdcULL;
  static const uint64_t static_value2 = 0xd039c0b56b7d1d09ULL;
};

template<class ContainerAllocator>
struct DataType< ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "statek_hw/RunImuCalibrationResponse";
  }

  static const char* value(const ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success # Set to true on success\n"
"float64[3] acc_bias # Some value from calibrated MPU9250.\n"
"float64[3] gyro_bias # Some value from calibrated MPU9250.\n"
"float64[3] mag_bias # Some value from calibrated MPU9250.\n"
"float64[3] mag_scale # Some value from calibrated MPU9250.\n"
;
  }

  static const char* value(const ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.acc_bias);
      stream.next(m.gyro_bias);
      stream.next(m.mag_bias);
      stream.next(m.mag_scale);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RunImuCalibrationResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::statek_hw::RunImuCalibrationResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "acc_bias[]" << std::endl;
    for (size_t i = 0; i < v.acc_bias.size(); ++i)
    {
      s << indent << "  acc_bias[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.acc_bias[i]);
    }
    s << indent << "gyro_bias[]" << std::endl;
    for (size_t i = 0; i < v.gyro_bias.size(); ++i)
    {
      s << indent << "  gyro_bias[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gyro_bias[i]);
    }
    s << indent << "mag_bias[]" << std::endl;
    for (size_t i = 0; i < v.mag_bias.size(); ++i)
    {
      s << indent << "  mag_bias[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.mag_bias[i]);
    }
    s << indent << "mag_scale[]" << std::endl;
    for (size_t i = 0; i < v.mag_scale.size(); ++i)
    {
      s << indent << "  mag_scale[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.mag_scale[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // STATEK_HW_MESSAGE_RUNIMUCALIBRATIONRESPONSE_H
