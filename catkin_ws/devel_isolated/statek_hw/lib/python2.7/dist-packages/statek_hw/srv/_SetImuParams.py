# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from statek_hw/SetImuParamsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetImuParamsRequest(genpy.Message):
  _md5sum = "5b52e44d9a6cc076ecccb46df6d4a341"
  _type = "statek_hw/SetImuParamsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 imu_update_rate_ms
float64[3] acc_bias # Some value from calibrated MPU9250.
float64[3] gyro_bias # Some value from calibrated MPU9250.
float64[3] mag_bias # Some value from calibrated MPU9250.
float64[3] mag_scale # Some value from calibrated MPU9250.
int16[3] mag_dec # Deg, min, sec.
"""
  __slots__ = ['imu_update_rate_ms','acc_bias','gyro_bias','mag_bias','mag_scale','mag_dec']
  _slot_types = ['uint32','float64[3]','float64[3]','float64[3]','float64[3]','int16[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       imu_update_rate_ms,acc_bias,gyro_bias,mag_bias,mag_scale,mag_dec

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetImuParamsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.imu_update_rate_ms is None:
        self.imu_update_rate_ms = 0
      if self.acc_bias is None:
        self.acc_bias = [0.] * 3
      if self.gyro_bias is None:
        self.gyro_bias = [0.] * 3
      if self.mag_bias is None:
        self.mag_bias = [0.] * 3
      if self.mag_scale is None:
        self.mag_scale = [0.] * 3
      if self.mag_dec is None:
        self.mag_dec = [0] * 3
    else:
      self.imu_update_rate_ms = 0
      self.acc_bias = [0.] * 3
      self.gyro_bias = [0.] * 3
      self.mag_bias = [0.] * 3
      self.mag_scale = [0.] * 3
      self.mag_dec = [0] * 3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.imu_update_rate_ms
      buff.write(_get_struct_I().pack(_x))
      buff.write(_get_struct_3d().pack(*self.acc_bias))
      buff.write(_get_struct_3d().pack(*self.gyro_bias))
      buff.write(_get_struct_3d().pack(*self.mag_bias))
      buff.write(_get_struct_3d().pack(*self.mag_scale))
      buff.write(_get_struct_3h().pack(*self.mag_dec))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.imu_update_rate_ms,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 24
      self.acc_bias = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.gyro_bias = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.mag_bias = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.mag_scale = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 6
      self.mag_dec = _get_struct_3h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.imu_update_rate_ms
      buff.write(_get_struct_I().pack(_x))
      buff.write(self.acc_bias.tostring())
      buff.write(self.gyro_bias.tostring())
      buff.write(self.mag_bias.tostring())
      buff.write(self.mag_scale.tostring())
      buff.write(self.mag_dec.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.imu_update_rate_ms,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 24
      self.acc_bias = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.gyro_bias = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.mag_bias = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.mag_scale = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 6
      self.mag_dec = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3h = None
def _get_struct_3h():
    global _struct_3h
    if _struct_3h is None:
        _struct_3h = struct.Struct("<3h")
    return _struct_3h
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from statek_hw/SetImuParamsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetImuParamsResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "statek_hw/SetImuParamsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success # Set to true on success.
"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetImuParamsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class SetImuParams(object):
  _type          = 'statek_hw/SetImuParams'
  _md5sum = '20fdbb57165b3957921339533f874eaf'
  _request_class  = SetImuParamsRequest
  _response_class = SetImuParamsResponse
